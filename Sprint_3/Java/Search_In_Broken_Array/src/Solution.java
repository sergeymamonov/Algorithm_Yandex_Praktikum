//52187834
//
//Принцип работы алгоритма:
//    Алгоритм основан на бинарном поиске. Несмотря на то, что массив имеет сдвиг, он по прежнему остается отсортированным.
//    Но у него есть две отсортированные части. Поэтому необходимо добавить проверку меньше ли крайний левый элемент
//    среднего элемента. Если да, значит левая половина упорядочена, а в правой есть сдвинутая часть, либо (ветвь else)
//    сдвинутая часть находится в левой части.
//    В остальном алгоритм аналогичен стандартному бинарному поиску.
//
//Обоснование корректности:
//    Алгоритм корректен, так как в цикле изменяются левый и правый указатели, пока они не сойдутся. Благодаря тому,
//    что массив отсортирован, нет необходимости смотреть все элементы, достаточно делить массив попалам и сравнивать
//    искомый элемент с крайними в этом диапазоне. Сдвиг массива только добавляет одну проверку в алгоритм.
//
//Временная сложность:
//    Так как на каждом шаге алгоритма размер массива сокращается вдвое, то потребуется сделать logN шагов.
//    То есть сложность алгоритма O(logN).
//
//Пространственная сложность:
//    Во время выполнения не создается дополнительных структур данных кроме исходного массива.
//    Пространственная Сложность O(N).

public class Solution {
    public static int brokenSearch(int[] arr, int k) {
        int left = 0;
        int right = arr.length - 1;
        while (left <= right) {
            int mid = (left + right) / 2;
            if (arr[mid] == k) {
                return mid;
            }
            if (arr[left] <= arr[mid]) {
                if (arr[left] <= k && k <= arr[mid]) {
                    right = mid - 1;
                } else {
                    left = mid + 1;
                }
            } else {
                if (arr[mid] <= k && k <= arr[right]) {
                    left = mid + 1;
                } else {
                    right = mid - 1;
                }
            }
        }
        return -1;
    }

    private static void test() {
        int[] arr = {19, 21, 100, 101, 1, 4, 5, 7, 12};
        assert 6 == brokenSearch(arr, 5);
    }
}
